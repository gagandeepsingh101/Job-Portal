// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  phone         String?
  location      String?
  resumeUrl     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  jobs         Job[]
  applications Application[]
}

model Job {
  id           String        @id @default(cuid())
  title        String
  department   String
  location     String
  salary       String?
  description  String        @db.Text
  requirements String        @db.Text
  status       JobStatus     @default(ACTIVE)
  resumeRequired Boolean     @default(false)
  customFields Json?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  createdBy    String
  
  user         User          @relation(fields: [createdBy], references: [id])
  applications Application[]
}

model Application {
  id          String            @id @default(cuid())
  jobId       String
  userId      String
  resumeUrl   String?
  answers     Json?
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  job         Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  statusLogs  StatusLog[]
  
  @@unique([jobId, userId])
}

model StatusLog {
  id            String            @id @default(cuid())
  applicationId String
  status        ApplicationStatus
  notes         String?
  createdAt     DateTime          @default(now())
  
  application   Application       @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum JobStatus {
  ACTIVE
  CLOSED
  DRAFT
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  ON_HOLD
}
